<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Lauda!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Port scan</title>
        	<para>
                Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés szerepére!
                https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287
            </para>
            <para>
            <programlisting language="java">
            <![CDATA[
            public class KapuSzkenner {
    
    public static void main(String[] args) {
        
        for(int i=0; i<1024; ++i)
            
            try {
                
                java.net.Socket socket = new java.net.Socket(args[0], i);
                
                System.out.println(i + " figyeli");
                
                socket.close();
                
            } catch (Exception e) {
                
                System.out.println(i + " nem figyeli");
                
            }
    }
    
}
            ]]>
            </programlisting>
            </para>
            <para>
            A feladatban használt kódunk arra szolgál, hogy a parancssori argomentumként kapott IP címen megpróbálunk TCP
            kapcsolatokat létrehozni. A kapcsolatot az alábbi kóddal próbáljunk meg felépíteni:<command>java.net.Socket socket
            = new java.net.Socket(args[0], i);</command>. Ha sikeresen kiépítjük a kapcsolatot akkor kiírja, hogy figyeli-e a portot és
            utána bezárjuk a socketet. Abban az esetben, viszont ha sikertelen a kapcsolat építés, akkor egy IOException-t kapunk és kiírjuk
            hogy nem figyeli a portot. Az alábbi képen láthatjuk, hogy melyik portot figyeljük, míg a többinél IOException lép fel.
            </para>
            <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="kapuszkenner.png" scale="70" />
                </imageobject>
            </mediaobject>
            </para>
    </section>

    <section>
        <title>AOP</title>
        	<para>
                Szőj bele egy átszövő vonatkozást az első védési programod Java átiratába! (Sztenderd védési feladat volt korábban.)
            </para>
            <para>  
            A feladatunk az volt, hogy az AspectJ segítségével az LZWBinfa java verziójához/átiratához (védési programhoz) fűzzünk hozzá valamilyen átszövő vonatkozást. 
            Én azt a megoldást választottam, hogy a binfahoz hozzáfüzöm a kiírás preorder és postorder változatát. Nézzük is meg ennek a módszernek a megvalósítását.
            </para>
            <para>
            <programlisting language="java">
            <![CDATA[
            int melyseg = 0;
            public pointcut kiir(LZWBinFa.Csomopont elem, java.io.PrintWriter os)
            : call(public void kiir(LZWBinFa.Csomopont, java.io.PrintWriter)) && args(elem,os);
            after (LZWBinFa.Csomopont elem, java.io.PrintWriter os) : kiir(elem,os)
            {
            try {
            preOrder(elem,new PrintWriter("pre-order.txt"));
            } catch (FileNotFoundException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
            }
            melyseg = 0;
            try {
            postOrder(elem,new PrintWriter("post-order.txt"));
            } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            }
            }
            ]]>
            </programlisting>
            </para>
            <para>
            Elsőként a pointcut segítségével megadjuk azt a helyet, ahol a binfában szeretnék végrehajtani magát a szövést. Jelen esetben ezt a kiir függvény segítségével fogjuk megejteni. 
            Ha ezzel megvagyunk, akkor a call utasítás segítségével megadjuk azt, hogy mi az a metódus amit hozzá akarunk fűzni az eredeti kódhoz. Ezt követően meg kell határoznunk, hogy a pointcut elé vagy után szeretnénk hozzáfűzni a hozzáfűzendő kódot.
            Erre szolgál majd az after utasítás, mely a kiir függvény után fog lefutni és hozzá fogja fűzni a preorder és postorder kiiratást a binfához. A preOrder metódus egy új txt file-ba fogja kiírni a binfa preorder bejárását.
            Esetleges hiba esetén egy Exception-t fogunk kapni. A postOrder metódus lényegében ugyan ezt a módszert fogja elvégezni csak postorder módon.
            </para>
            <para>
            <programlisting language="java">
            <![CDATA[
            public void preOrder(LZWBinFa.Csomopont elem, java.io.PrintWriter os){
            if (elem != null) {
            for (int i = 0; i < melyseg; ++i) {
            os.write("---");
            }
            os.print(elem.getBetu());
            os.print("(");
            os.print(melyseg - 1);
            os.println(")");
            ++melyseg;
            preOrder(elem.egyesGyermek(), os);
            preOrder(elem.nullasGyermek(), os);
            --melyseg;
            os.flush();
            }
            }
            public void postOrder(LZWBinFa.Csomopont elem, java.io.PrintWriter os){
            if (elem != null) {
            ++melyseg;
            postOrder(elem.egyesGyermek(), os);
            postOrder(elem.nullasGyermek(), os);
            --melyseg;
            for (int i = 0; i < melyseg; ++i) {
            os.print("---");
            }
            os.print(elem.getBetu());
            os.print("(");
            os.print(melyseg - 1);
            os.println(")");
            os.flush();
            }
            }
            ]]>
            </programlisting>
            </para>
            <para>
            Itt látható az a két fabejárás, melyek hozzá lettek fűzve az eredeti binfa kódhunkhoz, ezek segítségével elvégezzük a két féle kiírást.
            </para>
            <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="lzwhozzafuzes.png" scale="80" />
                </imageobject>
            </mediaobject>
            </para>
    </section>

    <section>
        <title>Android Játék</title>
        	<para>
                Írjunk egy egyszerű Androidos „játékot”! Építkezzünk például a 2. hét „Helló, Android!” feladatára!
            </para>
            <para>
            Feladatunk megoldásához én egy egyszerűbb java alapú androidos amőba játékot írtam, melyben két játékos játszik egymás ellen, amikor a játékos saját szimbolumával 3 egymás melletti kockát birtokol, abban az esetben nyer.
            Az első programlisting részben megírjuk az xml részt, melyben létrehozzuk a különböző kockákat melyekre kattintva el tudjuk helyezni a saját szimbólumunkat a játéktéren.
            Ezt a LinearLayout segítségével tehetjük meg, melyen belül Button parancs segítségével adhatjuk meg a különböző kockákat (melyek kattintásra aktívvá válnak.)
            </para>
            <para>
            <programlisting language="xml">
            <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:id="@+id/header_text"
        android:gravity="center_horizontal"
        android:textSize="20sp"
        android:textStyle="bold"
        android:text="Amőba játék"/>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/header_text"
        android:orientation="vertical">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center">

            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="8dp"
                android:id="@+id/btn0"
                android:tag="0"
                android:textSize="60sp"
                android:background="@android:color/darker_gray"
                tools:text="0">
            </Button>
            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="8dp"
                android:id="@+id/btn1"
                android:tag="1"
                android:textSize="60sp"
                android:background="@android:color/darker_gray"
                tools:text="1">
            </Button>
            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="8dp"
                android:id="@+id/btn2"
                android:tag="2"
                android:textSize="60sp"
                android:background="@android:color/darker_gray"
                tools:text="2">
            </Button>

        </LinearLayout>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center">

            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="8dp"
                android:id="@+id/btn3"
                android:tag="3"
                android:textSize="60sp"
                android:background="@android:color/darker_gray"
                tools:text="3">
            </Button>
            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="8dp"
                android:id="@+id/btn4"
                android:tag="4"
                android:textSize="60sp"
                android:background="@android:color/darker_gray"
                tools:text="4">
            </Button>
            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="8dp"
                android:id="@+id/btn5"
                android:tag="5"
                android:textSize="60sp"
                android:background="@android:color/darker_gray"
                tools:text="5">
            </Button>

        </LinearLayout>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center">

            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="8dp"
                android:id="@+id/btn6"
                android:tag="6"
                android:textSize="60sp"
                android:background="@android:color/darker_gray"
                tools:text="6">
            </Button>
            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="8dp"
                android:id="@+id/btn7"
                android:tag="7"
                android:textSize="60sp"
                android:background="@android:color/darker_gray"
                tools:text="7">
            </Button>
            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="8dp"
                android:id="@+id/btn8"
                android:tag="8"
                android:textSize="60sp"
                android:background="@android:color/darker_gray"
                tools:text="8">
            </Button>

        </LinearLayout>

    </LinearLayout>

</RelativeLayout>
            ]]>
            </programlisting>
            </para>
            <para>  
            Ezt követően megírjuk magát a java kódot, melyben a különböző kapcsolatokat vizsgáljuk, illetve megvizsgáljuk a különböző mezők telítettségét (éppen rákattintottunk-e már rá)
            </para>
            <para>
            A végén meg kell vizsgálnunk, hogy egy adott szereplő nyert e, ehhez szükséges ismernünk az amőba szabályait, mely szerint ha 3 azonos szimbólumot birtoklunk keresztben, hosszában vagy függőlegesen, abban az esetben ez a játékos nyer.
            Ezt követően a győztest kiíratjuk a kijelzőnk tetejére, hogy pl X a győztes.
            </para>
            <para>
            <programlisting language="java">
            <![CDATA[
            package com.example.tictactoe;

import androidx.appcompat.app.AppCompatActivity;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    Button btn0,btn1,btn2,btn3,btn4,btn5,btn6,btn7,btn8;
    TextView headerText;

    int PLAYER_O = 0;
    int PLAYER_X = 1;

    int activePlayer = PLAYER_O;

    int[] filledPos = {-1,-1,-1,-1,-1,-1,-1,-1,-1};

    boolean isGameActive = true;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        headerText = findViewById(R.id.header_text);
        btn0 = findViewById(R.id.btn0);
        btn1 = findViewById(R.id.btn1);
        btn2 = findViewById(R.id.btn2);
        btn3 = findViewById(R.id.btn3);
        btn4 = findViewById(R.id.btn4);
        btn5 = findViewById(R.id.btn5);
        btn6 = findViewById(R.id.btn6);
        btn7 = findViewById(R.id.btn7);
        btn8 = findViewById(R.id.btn8);

        btn0.setOnClickListener(this);
        btn1.setOnClickListener(this);
        btn2.setOnClickListener(this);
        btn3.setOnClickListener(this);
        btn4.setOnClickListener(this);
        btn5.setOnClickListener(this);
        btn6.setOnClickListener(this);
        btn7.setOnClickListener(this);
        btn8.setOnClickListener(this);


    }

    @Override
    public void onClick(View v) {
        // Logic for button press

        if(!isGameActive)
            return;

        Button clickedBtn = findViewById(v.getId());
        int clickedTag = Integer.parseInt(v.getTag().toString());

        if (filledPos[clickedTag] != -1){
            return;
        }

        filledPos[clickedTag] = activePlayer;

        if(activePlayer == PLAYER_O){
            clickedBtn.setText("O");
            clickedBtn.setBackground(getDrawable(android.R.color.holo_blue_bright));
            activePlayer = PLAYER_X;
            headerText.setText("X következik");
        }else{
            clickedBtn.setText("X");
            clickedBtn.setBackground(getDrawable(android.R.color.holo_orange_light));
            activePlayer = PLAYER_O;
            headerText.setText("O következik");
        }

        checkForWin();
    }
    private void checkForWin(){
        int[][] winningPos = {{0,1,2},{3,4,5},{6,7,8},{0,3,6},{1,4,7},{2,5,8},{0,4,8},{2,4,6}};

        for(int i = 0; i < 8; i++){
            int val0 = winningPos[i][0];
            int val1 = winningPos[i][1];
            int val2 = winningPos[i][2];

            if(filledPos[val0] == filledPos[val1] && filledPos[val1] == filledPos[val2]){
                if(filledPos[val0] != -1){

                    isGameActive = false;

                    if(filledPos[val0] == PLAYER_O)
                        headerText.setText("O a győztes");
                    else
                        headerText.setText("X a győztes");
                }
            }
        }
    }
}
            ]]>
            </programlisting>
            </para>
            <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="amobastart.png" scale="70" />
                </imageobject>
            </mediaobject>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="amobaeredmeny.png" scale="70" />
                </imageobject>
            </mediaobject>
            </para>

    </section>

    <section>
        <title>Junit teszt</title>
        	<para>
                A https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat poszt kézzel számított mélységét és szórását dolgozd be egy Junit tesztbe (sztenderd védési feladat volt korábban).
            </para>
            <para>
            A feladatunk szerint, az LZWBinfa java verzióján kell Junit tesztet végrehajtani. A Junit teszt lényege, hogy ellenőrzést hajt végre a megírt kódon, hogy az az elvárásainknak megfelelő módon működik-e, vagy sem. 
            Ha jól működik a megírt kódunk, akkor a teszt sikeresen lefut, ellenben ha a teszt sikertelen akkor errort fogunk kapni eredményül. Most pedig nézzük meg a kódunkat.
            </para>
            <para>
            <programlisting language="java">
            <![CDATA[
            import static org.junit.jupiter.api.Assertions.*;
            public class BinfaTest {
            LZWBinFa binfa = new LZWBinFa();
            @org.junit.Test
            public void tesBitFeldolg() {
            for (char c : "01111001001001000111".toCharArray()) {
            binfa.egyBitFeldolg(c);
            }
            org.junit.Assert.assertEquals(4, binfa.getMelyseg(), 0.0);
            org.junit.Assert.assertEquals(2.75, binfa.getAtlag(), 0.001);
            org.junit.Assert.assertEquals(0.957427, binfa.getSzoras(), 0.0001);
            }
            }
            ]]>
            </programlisting>
            </para>
            <para>
            A kód létrehoz egy binfa példányt, majd egy for ciklus segítségével végigmegyünk a megadott stringen és feldolgozzuk azt. 
            Ezután az assertEquals metódus elvégzi az ellenorzést. Az első paraméterként megadjuk hogy milyen eredményt várunk a tesztelni kívánt metódustól, a második paraméter maga a metódus amit
            teszteli akarunk, a harmadik pedig egy olyan érték lesz ami azt adja meg hogy mekkora eltérést engedünk meg a teszt során.
            </para>
            <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="binfajava.png" scale="70" />
                </imageobject>
            </mediaobject>
            </para>
    </section>     

    <section>
     <title>EPAM: Kivételkezelés</title>
        	<para>
                Adott az alábbi kódrészlet. Mi történik, ha az input változó 1F, “string” vagy pedig null? Meghívódik e minden esetben a finally ág? Válaszod indokold! 
            </para>
            <para>Megoldás videó forrása: <link xlink:href="https://youtu.be/M29lotnvgBA"/></para>
            <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="epam.png" scale="70" />
                </imageobject>
            </mediaobject>
            </para>
            <para>
            Amennyiben az input változó értéke null, tehát a test metódus, null objektummal hívódik meg abban az esetben a egy Runtime Exception-t (futásidejű kivételt) fogunk kapni, mivel ez a parent, azaz szülő osztálya a Child és Parent kivételeknek, így az <command> instanceof </command> hamis értéket fog visszaadni. A try ágban így egyik feltétel sem fog teljesülni. Az előzőekből adódóan a trycatch blokkokon belül csak az utolsó blokk fogja "elkapni."
            A fentiekből következően, az alábbi kimenetet fogjuk kapni:
            <programlisting language="java">
            <![CDATA[
            Try!
            Exception is caught!
            Finally!
            ]]>
            </programlisting>
            </para>
             <para>
            Második esetként nézzük meg azt az eshetőséget, amennyiben az imput változó 1F értékű azaz "string" típusú. Ebben az esetben a string objektumunk tesztelésénél egy ParentExceptiont fogunk visszakapni, mivel a szülő osztály nem instance-ja a a gyerek osztálynak. Ez ugye fordított esetben igaz lenne, azonban a trycatch-en belül a catch ágak sorrendje miatt jelenesetben nincs létjogosultsága. A trycatch blokkok közül ő a második blokkban kerül "elkapásra."
            Őt a <command>ParentException e</command> catch ág fogja kezelni, ezért a <command>System.exit(1)</command> utasítás miatt, a program 1-es hibakóddal leáll, ezért nincs már lehetőségünk a továbbiakban arra, hogy a finally ágban lévő utasítások lefussanak.
            Ebben az esetben, az alábbi kimenetet kapjuk eredményül:
            <programlisting language="java">
            <![CDATA[
            Try!
            Parent Exception is caught!
            Command execution failed.
            org.apache.commons.exec.ExecuteException: Process exited with an error: 1 (Exit value: 1)          
            ]]>
            </programlisting>
            </para>
            <para>
            Végül, de nem utolsó sorban, amikor az input "float" típusú, akkor egy ChildExceptiont fogunk visszakapni, mely már az első catch blokkban elkapásra kerül, mivel a ChildException saját magának egy instance-e lesz. Itt a gyerek osztály a szülő osztály leszármazottja lesz, emiatt az <command>if</command> feltétel teljesülni fog.       
            Float típusú input vizsgálat esetében, a test metódus számunkra egy kivételt (exception-t) fog dobni, ennek ellenére a finally ezesetben is sikeresen le tud futni
            Az alábbi kimenetet kapjuk eredményül:
            <programlisting language="java">
            <![CDATA[
            Try!
            Child Exception is caught!
            Finally!
            ]]>
            </programlisting>
            </para>
    </section
</chapter>           