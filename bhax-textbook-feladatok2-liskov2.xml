<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Liskov!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Liskov helyettesítés sértése</title>
        	<para>
            Írjunk olyan OO, leforduló Java és C++ kódcsipetet, amely megsérti a Liskov elvet! Mutassunk rá a megoldásra: jobb OO tervezés.
 <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf">(93-99 fólia) (számos példa szerepel az elv megsértésére az UDPROG repóban, lásd pl. source/binom/BatfaiBarki/madarak/)
            </para>
            <para>
            A Liskov elv lényege az objektumorientált programok helyes tervezése. A könnyű érthetőség kedvéért egy példán keresztül nézzük meg ezt. Vegyük például azt hogy van egy madár osztályunk. 
            Ebben létrehozunk egy tulajdonságot ami kimondja hogy a madarak tudnak repülni. Ez után ha származtatunk két osztályt a
            madár osztályból, legyen egy sas és egy pingvin osztály, akkor az megsérti a liskov elvet. A elv szerint
            ugyanis rossz a tervezés. Ez abból derül ki hogy mivel származtatott osztályról van szó a pingvin osztály
            megkapja a reülés tulajdonságot. Ez viszont hiba, mivel a pingvin nem tud repülni. Ha nem akarjuk
            megsérteni az elvet akkor a megoldás az hogy újra kell tervezni a programot. Ezt például úgy lehet megtenni
            ha a repülés tulajdonságát elkülönítjük egy repülo madarak osztályba és ez után a sas a repülő madarak
            osztályába fog tartozni a pingvin pedig csak a madarak osztályába. Így a tervezés már jó lesz és nem lesz megsérve a Liskov elv.
            </para>
            <para>
            <programlisting language="java">
            <![CDATA[
            class Madar {
public void repul() {};
};
class Program {
public void fgv ( Madar madar ) {
madar.repul();
}
};
class Sas extends Madar
{};
class Pingvin extends Madar
{};
class Liskov{
public static void main(String[] args)
{
Program kod = new Program();
Madar mad = new Madar();
kod.fgv ( mad );
Sas sass = new Sas();
kod.fgv ( sass );
Pingvin pingvinn = new Pingvin();
kod.fgv ( pingvinn );
}
}

            ]]>
            </programlisting>
            </para>
            <para>
            <programlisting language="java">
            <![CDATA[
            class Madar {
public:
virtual void repul() {};
};
class Program {
public:
void fgv ( Madar &madar ) {
madar.repul();
}
};
class Sas : public Madar
{};
class Pingvin : public Madar
{};
int main ( int argc, char **argv )
{
Program program;
Madar madar;
program.fgv ( madar );
Sas sas;
program.fgv ( sas );
Pingvin pingvin;
program.fgv ( pingvin );
}


            ]]>
            </programlisting>
            </para>

    </section>

    <section>
        <title>Szülő-gyerek</title>
        	<para>
            Írjunk Szülő-gyerek Java és C++ osztálydefiníciót, amelyben demonstrálni tudjuk, hogy az ősön keresztül csak az ős üzenetei küldhetőek!
            <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf"> (98. fólia)
            </para>
            <para>
            A feladat megoldása során szükség van két osztályra a kódban ahhoz hogy bemutathassuk a feladatot. 
            Az egyik osztály az ős osztály lesz, ennek a neve <command> Szulő </command>. A másik osztály egy származtatott osztály amely a
            <command>Gyerek</command> nevet kapta.
            </para>
            <para>
            Az ős osztály lényege hogy egy általánosabb egységet hozzunk létre, amely egy nagyobb egységbe zárja a
            kódban létrehozott példányokat. Így a benne szereplő tulajdonságok egy tágabb tartományt hoznak létre.
            Ilyen például az, ha egy programban le akarjuk modellezni az emlosöket. Az emlős lesz az ős osztály,amely
            egy tágabb tartomány, és minden benne szereplő tulajdonság igaz lesz az emlősökre.
            </para>
            <para>
            A származtatott osztály egy szűkebb tartomány, amely már több megkötést tartalmaz, viszont rendelkezik az
            ős osztály tulajdonságaival is. Erre példa ha mondjuk származtatott osztályként létrehozunk egy ember
            vagy delfin osztályt. Mindkettő több megkötést tartalmaz mint az emlős, de akár az embert, akár a delfint
            nézzük mind a kettő rendelkezik az emlős osztály tulajdonságaival is. 
            </para>
            <para>
            A feladat megoldása során egy egyszerűbb példa kerül bemutatásra. Egyszer lesz nekünk, a korábban már említett Szulő és Gyerek
            osztály. Az ős osztály a szülő lesz, a származtatott osztály pedig a gyerek. A gyerek osztály tudja használni
            a szülő osztály metódusát is, viszont a szülő nem tudja a gyerekét.
            </para>
            <para>
            Most pedig nézzük meg a kódokat. Először is a Java nyelvű megvalósítást:
            </para>
            <para>
            <programlisting language="java">
            <![CDATA[
            class Szulo
{
public void szulo_vagyok()
{
System.out.println("Én vagyok a szülö.");
}
};
class Gyerek extends Szulo
{
public void gyerek_vagyok()
{
System.out.println("Én vagyok a gyerek.");
}
public static void main(String[] args)
{
Szulo apa = new Szulo();
Gyerek joska = new Gyerek();
apa.szulo_vagyok();
joska.gyerek_vagyok();
joska.szulo_vagyok();
apa.gyerek_vagyok(); //ez így nem m˝uködik mivel az ˝os ←-
osztály nem fér hozzá a származtatott osztályhoz ezáltal ←-
a benne lév˝o metódusokhoz sem
}
};

            ]]>
            </programlisting>
            </para>
            <para>
            Létrehozásra kerül a két osztály, majd a mainben mindegyik osztályból egy-egy példány. Láthatjuk hogy a
kódban jelölve van a származtatás. A Gyerek osztály létrehozásánál ott van az <command>extends</command> kulcsszó. Ez arra
szolgál hogy mögötte feltüntessünk egy másik osztályt, amely által az meg lesz jelölve ősnek. Mivel van  
ős osztálya ő egy származtatottá válik. Végül személtetés céljából a példányokra meghívásra kerül, 
a szülő osztály, valamint a gyerek osztály metódusa is. A gyerek osztály tudja használni a szülő
osztály függvényét, míg a szülő nem tudja használni a gyerek osztályét.
            </para>
            <para>
            Azonban, ha mégis megpróbáljuk az ős osztálynak a példányára meghívni a származtatott osztály függvényét akkor 
az hibát fog eredményezni.
            </para>
            <para>
            Most pedig következzen a C++-os megoldás. Látható hogy lényeges különbség nincs a Javahoz képest. Ami
            változik az mindösszesen annyi, hogy másként van megjelölve a származtatás. A futás során is ugyanarra az eredményre
            jutunk.
            </para>
            <para>
            <programlisting language="c++">
            <![CDATA[
            #include <iostream>
class Szulo
{
public:
void szulo_vagyok()
{
std::cout << "Én vagyok a szülö." << std::endl;
}
};
class Gyerek : public Szulo
{
public:
void gyerek_vagyok()
{
std::cout << "Én vagyok a gyerek." << std::endl;
}
};
int main ( int argc, char **argv )
{
Szulo szulo;
Gyerek gyerek;
szulo.szulo_vagyok();
gyerek.gyerek_vagyok();
gyerek.szulo_vagyok();
//szulo.gyerek_vagyok(); ez így nem m˝uködik mivel az ˝os ←-
osztály nem fér hozzá a származtatott osztályhoz ezáltal a ←-
benne lév˝o metódusokhoz sem
}
            ]]>
            </programlisting>
            </para>

    </section> 

    <section>
        <title>Anti OO</title>
        	<para>
            A BBP algoritmussal a Pi hexadecimális kifejtésének a 0. pozíciótól számított 106, 107, 108 darab jegyét
            határozzuk meg C, C++, Java és C# nyelveken és vessük össze a futási idoket!
            <link xlink:href="https://www.tankonyvtar.hu/-hu/tartalom/tkt/javat-tanitok-javat/apas03.html#id561066">
            </para>
            <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="source/img/C++pelda.png" scale="70" />
                </imageobject>
            </mediaobject>
            </para>
            <para>
            A táblázat alapján látható hogy a futási idő eredményei változnak attól függően, hogy milyen program
            nyelvet használunk. A leggyorsabb a Java nyelven megírt kód volt, bár ez nem meglepő hiszen az beépített
            optimalizálóval rendelkezik a kódok gyorsítása érdekében. Leglasabb eredményt pedig a C nyelv hozott
            ahol a 10 a 8-on eredmény kiszámításához több mint 3 perc kellett.
            </para>

    </section>

    <section>
        <title>Hello, Android!</title>
        	<para>
                Fealadatleírás
            </para>

    </section>    

    <section>
        <title>Hello, SMNIST for Humans!</title>
        	<para>
                Fealadatleírás, PIROS FELADAT
            </para>

    </section> 

    <section>
        <title>Ciklomatikus komplexitás</title>
        	<para>
            Számoljuk ki valamelyik programunk függvényeinek ciklomatikus komplexitását! Lásd a fogalom tekintetében a <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf">(77-79 fóliát)!
            </para>
            <para>
            A ciklomatikus komplexitás lényege hogy egy képlet alapján, számban kifejezve megmondja egy adott
            programkódról annak összetettségét. A képlet úgy épül fel, hogy egy gráfot képezünk a kódból majd ennek
            segítségével számolunk. Ha kész a gráf akkor a következőt kell tenni. A gráf éleinek a számából ki kell
            vonni a csúcspontok számát majd hozzá kell adni a program egységek számánk kétszeresét.
            </para>
            <para>
            Egyszerű programok esetében akár manuálisan is ki lehet számolni a komplexitást, de összetettebb programok esetében már egyszerűbb egy segédprogrammal vagy online fellelhető kalkulátorral számolni. 
            Most az utóbbi esetet használjuk. Ha ellátogatunk a <link xlink:href="http://www.lizard.ws/#try"> nevű oldalra akkor ott online is ki lehet számoltatni egy kódnak a komplexitását. Ennek a feladatnak az elvégzéséhez a Binfa java kódján lett
            lefuttatva az ellenörzés. Az eredmény az alábbi lett.
            </para>
            <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="source/img/eredmeny.png" scale="70" />
                </imageobject>
            </mediaobject>
            </para>

    </section> 

    <section>
        <title>EPAM: Interfész evolúció Java-ban</title>
        	<para>
                Fealadatleírás
            </para>

    </section>  

     <section><title>EPAM:
        Liskov féle helyettesíthetőség elve, öröklődés </title>
        <para>Adott az alábbi osztály hierarchiánk
            <command>class Vehicle</command>
            , <command>class Car extends Vehicle</command> , <command>class Supercar extends
            Car</command></para>
        <para> Osztályonként történik egy kiíratás, fontos kiemelnünk, hogy a Vehicle
            osztályban szereplő start() metódust mindegyik alosztályban definiálnunk kell. Mi
            történik ezen kódok futtatása esetén, és miért? </para>
        <para>Megoldás forráskódja:<link
                xlink:href="">
                </link></para>    
        <programlisting language="java">
            <![CDATA[
  public class CarTest {

    public void testLiskov() {
        Vehicle firstVehicle = new Supercar();
        firstVehicle.start();
        System.out.println(firstVehicle instanceof Car);

        Car secondVehicle = (Car) firstVehicle;
        secondVehicle.start();
        System.out.println(secondVehicle instanceof Supercar);

    }

    public static void main (String[] args){

        CarTest test = new CarTest();
        test.testLiskov();

    }
}

            ]]>
        </programlisting>
        <para>Javaban, egy alosztály példányosítása során,meghívódnak az ősosztályok
            argumentum nélküli konstruktorai is, ezért láthatjuk kiíratva a képernyőn az első három sort,
            hiába csak egy Supercar objektumot hoztunk létre.
            Az előző feladatban szót ejtettünk arról, hogy a referencia típusa adja meg, hogy milyen
            metódusokat hívhatunk meg az objektumra, tehát mikor egy szuperautóra hivatkozik egy
            jármű referencia, akkor meghívhatjuk a start() metódust, mivel az szerepel a Vehicle
            osztályban, azonban mivel ez a metódus felül van definiálva a Supercar alosztályban, ezért
            lesz kiírva a nagyedik sorban, hogy "Supercar is starting."</para>
        <para>Az ötödik sorbeli true kiíratása lényegében azért történik, mivel az instanceof operátor igaz értéket ad
            vissza, akkor is, ha egy őstípust és egy gyermek objektumot vizsgálunk. Mivel ez a
            szülő-gyerek hierarchia fennáll a Car és a Supercar osztályok esetében és Car
            referenciával lehet hivatkozni egy Supercar példányra, ezért kapunk igaz értéket.</para>
        <para>Egy kis <link xlink:href="https://www.baeldung.com/java-type-casting">research</link>
            után az is kiderült, ha egy subclass típusú objektumot típuskényszerítünk egy superclass
            típusra, akkor az az objektum megmarad subclass típusúnak, csak a rá hivatkozó
            referencia változik meg, ezért van az, hogy az output hatodik sorában még mindig a
            "Supercar is starting" szöveget látjuk, mert a Supercar objektum típusa nem változott
            meg, csak most már egy Car típusú referncia is hivatkozik rá, de annak még mindig megvan
            a start() metódusa, ugyanúgy, mint a Vehicle osztálynak. Innen pedig az is ered, hogy
            miért ad az instanceof operátor megint igaz értéket a hetedik sorban. Ugyanezért, ami
            fentebb olvaható: mert nem változott meg az objektum típusa, csak a referenciáé.</para>    
        <para>
            Az alábbi kódrészlet szintaktikai hibát okozna:
        </para>    
        <programlisting language="java">
            <![CDATA[
        Supercar thirdVehicle = new Vehicle();
        thirdVehicle.start();
            ]]>
        </programlisting> 
        <para>Mivel a Supercar osztály őse a Vehicle osztály, ezért az öröklődés miatt fennáll
            közöttük egy "is-a" kapcsolat a következő módon: Supercar is a Veihcle. Ezt nyugodtan
            kijelenthetjük, de ez visszafelé már nem igaz. Amíg minden szuperautó egy járműnek
            tekinthető, addig nem minden jármű egy szuperautó.</para>
        <para>Hiába hozunk létre egy Vehicle objektumot, ha azt egy Supercar típusú referenciának
            adjuk át, mivel mint a szülő-gyerek feladatban is láthattuk, a referencia határozza meg,
            hogy milyen metódusokat hívhatunk majd meg, az objektum típusától függetlenül. Innentől
            kezdve a fenti deklaráció szerint meghívhatóak lesznek majd a Supercar osztály
            metódusai. Igen ám, de az tartalmazhat olyan metódusokat, amelyek nincsenek benne a
            Vehicle osztályban, ezért a java nem enged meg ilyen típusú deklarációkat, csak a
            fordított eset megengedett, ha szülő referenciának adunk át gyerek típusú
            objektumot.</para>    
    </section>


    <section>
        <title>EPAM: Interfész, Osztály, Absztrak Osztály</title>
        	<para>
                Fealadatleírás
            </para>

    </section>    
        

</chapter>                